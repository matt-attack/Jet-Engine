
struct VS_INPUT
{
    float4 Position   : POSITION;
    float2 Texture    : TEXCOORD0;	
};

struct VS_OUTPUT
{
    float4 Position   : SV_Position;
	float2 xy : TEXCOORD0;
	float2 Texture : TEXCOORD3;
	float3 WorldPos   : TEXCOORD1;
	float Depth       : TEXCOORD2;
};

cbuffer Matrices//Terrain
{
	float4x4 world, view, projection;
	float4x4 WorldViewProjection;
};

Texture2D indirection: register(t6);
Texture2D tiles: register(t7);

Texture2D nmap : register(t0);
//Texture2D grass : register(t6);
//Texture2D rock : register(t7);

sampler Ssampler : register(s0);

sampler Tsampler: register(s5);

VS_OUTPUT vs_main( in VS_INPUT In )
{
	VS_OUTPUT Out;
	Out.xy = float2(In.Position.x/(2048*TERRAIN_SCALE), In.Position.z/(2048*TERRAIN_SCALE));
	Out.Position = mul(In.Position, WorldViewProjection);
	
	Out.WorldPos = In.Position;
	Out.Depth = mul(In.Position, view).z;
	Out.Texture = In.Texture;
	return Out; //return output vertex
}

#include "base_lighting.txt"


float4 ps_main( in VS_OUTPUT In) : SV_Target
{
	float4 n = nmap.Sample(Ssampler, In.xy).rgba;
	float3 normal = normalize(n.xyz*2-float3(1,1,1));
	
	float4 offset = indirection.Sample(Tsampler, In.xy)*255;
	//return float4(1,offset.bg/16, 1);
	float scale = offset.r;
	float2 tile_offset = float2(offset.b/16, offset.g/16);
	
	float2 tmp = fmod(In.xy*2*TERRAIN_SCALE*TILE_SCALE/scale, 1/16.0);
	//this draws borders of the tiles
	if (tmp.x < 0.002 || tmp.x > 1.0/16.0 - 0.002)
		return float4(0,0,0,0);
	if (tmp.y < 0.002 || tmp.y > 1.0/16.0 - 0.002)
		return float4(0,0,0,0);
		
	tile_offset += tmp;//*(254.0/256.0) + (1.0/4096.0);

	
	float3 color = tiles.Sample(Ssampler, tile_offset).rgb;
	
	//return float4(color,1);//*n.a;
	//float3 color = grass.Sample(Tsampler, float2(In.xy.x*64*4, In.xy.y*64*4)).rgb;
	
	//float3 rockc = rock.Sample(Tsampler, float2(In.xy.x*64, In.xy.y*64));

	float Dot = saturate(dot(normal, LightDirection));
	
	//return float4(normal.xyz, 1);
	
	float rl = calculate_shadow(In.WorldPos, In.Depth, Dot);
	float3 light = calculate_light(In.WorldPos, normal);

	
	float slope = 1-normal.y;
	float3 slopecolor;
	/*if (slope < 0.07)
		slopecolor = float3(0,1,0);
	else if (slope < 0.7)//93)
	{
		slopecolor = float3(0,0,1);
		color = rockc;//float3(0.35,0.35,0.35);
	}
	else
		slopecolor = float3(1,0,0);*/
		
	/*if(slope < 0.7)
    {
        float blendAmount = slope / 0.7f;
        color = lerp(color, rockc*0.5, blendAmount);
    }
	if(slope >= 0.7) 
    {
        color = rockc*0.5;
    }*/
	
	//return float4(color, 1);
	
	//do fog
	float4 fcolor = float4(0.5,0.6,0.7,1);
	float FogEnd = 1200;
	float ViewpointDistance = In.Depth;//clamp(1000-In.Depth,0,10000);
	float FogStart = 200;
	float fog = (FogEnd - ViewpointDistance) / (FogEnd - FogStart);//In.Depth/2000;
	fog = 1-clamp(fog, 0, 1);
	
	//height based fog!
	if (In.WorldPos.y > 150)
		fog *= clamp((300-(In.WorldPos.y-150))*0.0033,0,1);
		
	fog = 0;
	//n.w -= 0.5;
	//n.w *= 2;
	float factor = n.w*rl + length(AmbientDown);//max(n.w, rl);// + 0.5;//length(AmbientUp);//0.5;//AmbientColor;
	//return float4(n.w, n.w, n.w, 1);
	//return float4(Dot, Dot, Dot, 1);
	//return float4(rl, rl, rl, 1);
	return float4(lerp(color*factor+light, fcolor, fog),1);
}


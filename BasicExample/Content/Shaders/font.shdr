struct VS_INPUT
{
	float2 Position   : POSITION;
	float2 Texture    : TEXCOORD;
};

//Vertex shader output structure
struct VS_OUTPUT
{
	float4 Position   : SV_Position;
	float2 TexCoord   : TEXCOORD;
};

//float4 Color;
cbuffer Color
{
	float4 color;
};

Texture2D Texture;
SamplerState TextureSampler;

VS_OUTPUT vs_main( in VS_INPUT In )
{
	VS_OUTPUT Out;

	Out.Position = float4(In.Position.xy,0,1);
	Out.TexCoord = In.Texture;

	return Out;
};

float Time = 3;
float4 ps_main( in VS_OUTPUT In) : SV_Target
{
	float4 col = Texture.Sample(TextureSampler, In.TexCoord);
	
	//texture is 512x512
	float4 outc;
	//try a 3x1 box filter?
	//for (int i = -1; i < 2; i++)
	int i = 0;
	{
	  float off = (1.0/3.0)*(1.0/512.0)*(float)i;
	  float d = abs(ddx(In.TexCoord));
	  off = (1.0f/3.0f)*d*(float)i;
	  float4 col = Texture.Sample(TextureSampler, In.TexCoord + float2(off, 0));
	  
	  float mask = col.a;
	  col.a = col.a >= 0.2f ? 1.0f : 0.0f;
	  //float afwidth = 0;//length(float2(ddx(mask), ddy(mask))) * 0.70710678118654757;
      //col.a = smoothstep(0.4-afwidth, 0.4+afwidth, mask);
	  col.a = smoothstep(0.2,0.5,mask);
	  if (i == 0)
		outc.rgb = col.a;
	  else if (i == 1)
        outc.rgb = col.a;
	  else
	    outc.rgb = col.a;
	}
	//this is probably somewhat wrong
	//if (outc.r < 0.2 || outc.b < 0.2)
	// outc.g = 0;
	  
	float alpha = (outc.r + outc.g + outc.b)/3.0;
	//alpha = 0;
	//if (outc.r > 0 || outc.g > 0 || outc.b > 0)
	 //alpha = 1;
	return float4(outc.r, outc.g, outc.b, alpha)*color;
	
	//need to sample for each subpixel
	//and do this for each
	
	float mask = col.a;
	//col.a = col.a >= 0.35f ? 1.0f : 0.0f;
	float afwidth = length(float2(ddx(mask), ddy(mask))) * 0.70710678118654757;
    col.a = smoothstep(0.4-afwidth, 0.4+afwidth, mask);
	//col.a = smoothstep(0.2,0.65,mask);//antialias?
	//col.a = col.a >= 0.3f ? 1.0f : 0.0f;
	//clip( col.a < 0.5f ? -1 : 1 );//alpha test

	//return float4(1,1,1,1);
	return float4(1,1,1,col.a)*color;

	//glow
	//float4 glowTexel = tex2D(TextureSampler,In.TexCoord + float2(0.01,0.01));//use for dropshadow
	//float4 glowc = float4(0,0,0,col.a) + smoothstep(0.3,0.7,glowTexel.a);
	//col = lerp(glowc, Color, glowTexel.a);
	//return col;//float4(1,1,1,col.a);//*Color;//tex2D(TextureSampler, In.TexCoord);//In.Diffuse;
};
// Global variables
cbuffer Variables
{
	float4x4 WorldViewProjection;
	float4 gEyePosW;

	float2 gQuadTexC[4];/* = 
	{
		float2(0.0f, 1.0f),
		float2(1.0f, 1.0f),
		float2(0.0f, 0.0f),
		float2(1.0f, 0.0f)
	};*/
}

struct Particle
{
	float3 InitialPosW : POSITION;
	float3 InitialVelW : TEXCOORD;//VELOCITY;
	float2 SizeW       : TANGENT;//SIZE;
	float Age          : BLENDWEIGHT;
	float4 Color : COLOR;
	//uint Type          : TYPE;
	//int noParticles   : PARTICLES;
};

cbuffer cbFixed
{
	// Net constant acceleration used to accerlate the particles.
	float3 gAccelW = {0.0f, 0.0f, 0.0f};
	
	// Texture coordinates used to stretch texture over quad 
	// when we expand point particle into a quad.
	
};

struct VertexOut
{
	float3 PosW  : POSITION;
	float2 SizeW : SIZE;
	float4 Color : COLOR;
	uint   Type  : TYPE;
};

VertexOut vs_main(Particle vin)
{
	VertexOut vout;
	float t = vin.Age;
	float3 accel = {sin(vin.Age)*0.0f,0.0f, cos(vin.Age)*0.0f}; 
	float3 drag = -00.1*t*vin.InitialVelW ; 
	//float3 accel = {sin(vin.Age)*0.0f,vin.Age*-0.2, cos(vin.Age)*0.0f}; 
	
	//float3 vAcc = 0.1f*t*t*gAccelW/2  +0.1f*t*t*accel + 0.1*t*vin.InitialVelW  + vin.InitialPosW ;
	// constant acceleration equation
	vout.PosW = vin.InitialPosW;//vAcc;
	


	// fade color with time
	//float opacity = 1.0f - smoothstep(0.0f, 1.0f, t/8.0f);
	float x = 0.3;//sin(vAcc);
	float y = 0.2;//-sin(vAcc);
	float z = 0.2;//cos(vAcc);
	vout.Color = vin.Color;//float4(x, y, z, 1.0f);
	
	vout.SizeW = vin.SizeW;//+(vin.Age*0.01);
	//vout.Type  = vin.Type;
	
	return vout;
}

struct GeoOut
{
	float4 PosH  : SV_Position;
	float4 Color : COLOR;
	float2 Tex   : TEXCOORD;
};

// The draw GS just expands points into camera facing quads.
[maxvertexcount(4)]
void gs_main(point VertexOut gin[1], 
            inout TriangleStream<GeoOut> triStream)
{	
	// do not draw emitter particles.
	//if( gin[0].Type != PT_EMITTER )
	{
		//
		// Compute world matrix so that billboard faces the camera.
		//
		float3 look  = normalize(gEyePosW.xyz - gin[0].PosW);
		float3 right = normalize(cross(float3(0,1,0), look));
		float3 up    = cross(look, right);
		
		//
		// Compute triangle strip vertices (quad) in world space.
		//
		float halfWidth  = 0.5f*gin[0].SizeW.x;
		float halfHeight = 0.5f*gin[0].SizeW.y;
	
		float4 v[4];
		v[0] = float4(gin[0].PosW + halfWidth*right - halfHeight*up, 1.0f);
		v[1] = float4(gin[0].PosW + halfWidth*right + halfHeight*up, 1.0f);
		v[2] = float4(gin[0].PosW - halfWidth*right - halfHeight*up, 1.0f);
		v[3] = float4(gin[0].PosW - halfWidth*right + halfHeight*up, 1.0f);
		
		//
		// Transform quad vertices to world space and output 
		// them as a triangle strip.
		//
		GeoOut gout;
		/*[unroll]
		for(int i = 0; i < 4; ++i)
		{
			gout.PosH  = mul(v[i], WorldViewProjection);
			gout.Tex   = gQuadTexC[i];
			gout.Color = gin[0].Color;
			triStream.Append(gout);
		}	*/
		gout.PosH  = mul(v[0], WorldViewProjection);
		gout.Tex   = float2(0,1);
		gout.Color = gin[0].Color;
		triStream.Append(gout);

		gout.PosH  = mul(v[1], WorldViewProjection);
		gout.Tex   = float2(1,1);
		//gout.Color = gin[0].Color;
		triStream.Append(gout);

		gout.PosH  = mul(v[2], WorldViewProjection);
		gout.Tex   = float2(0,0);
		//gout.Color = gin[0].Color;
		triStream.Append(gout);

		gout.PosH  = mul(v[3], WorldViewProjection);
		gout.Tex   = float2(1,0);//gQuadTexC[3];
		//gout.Color = gin[0].Color;
		triStream.Append(gout);
	}
}

// Array of textures for texturing the particles.
Texture2D gTex : register(t4);
SamplerState samLinear;


float4 ps_main(GeoOut pin) : SV_TARGET
{
	return (gTex.Sample(samLinear, pin.Tex)*pin.Color);
}